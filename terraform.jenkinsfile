pipeline {
    agent any
    parameters {
        choice(name: 'Deploy_env', description: "Environment to deploy to", choices: 'shared\ndev\nqa\nstaging\ndemo')
        string(name: 'Branch', defaultValue: 'master', description: 'Branch issuing pull request')
    }
    environment {
        TF_VAR_ssh_key=credentials('ROOT')
    }
    stages {
        stage('Initialize'){
            steps {
                deleteDir()
                buildName "Build-${Branch}-${Deploy_env}-${BUILD_ID}"
                buildDescription "${Deploy_env} Build from ${Branch}"
            }
        }
        stage('Retrieve Code'){
            steps {
                git (
                    branch: "${Branch}",
                    credentialsId: 'Main',
                    url: "${INFRA_REPO}"
                )
            }
        }
        stage('Decrypt Files'){
            steps {
                dir("terraform"){
                    sh 'chmod 777 decrypt.sh'
                    sh './decrypt.sh'
                }
            }
        }
        stage('Run plan'){
            steps {
                load '/home/jenkins/.envars/aws'
                dir("terraform/${Deploy_env}"){
                    sh 'terraform init'
                    sh "terraform plan -out=${BUILD_ID}.out"
                }
                slackUploadFile filepath: "${BUILD_ID}.out", initialComment: "New Infra Output for ${Deploy_Env} Environment"
            }
        }
        stage('Approve Plan'){
            steps {
                timeout(time:180) {
                    input(message: "Ready to run Plan?", ok: "Approve")
                    load '/home/jenkins/.envars/aws'
                    dir("terraform/${Deploy_env}"){
                        sh "terraform apply -auto-approve ${BUILD_ID}.out"
                    }
                    slackSend color: 'good', message: 'Message from Jenkins Pipeline'
                }
            }
        }
    }
}
